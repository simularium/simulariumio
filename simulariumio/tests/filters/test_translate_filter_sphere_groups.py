#!/usr/bin/env python
# -*- coding: utf-8 -*-

import pytest
import numpy as np

from simulariumio import MetaData, UnitData, JsonWriter, DisplayData
from simulariumio.physicell import PhysicellConverter, PhysicellData
from simulariumio.filters import TranslateFilter
from simulariumio.constants import DISPLAY_TYPE, VIEWER_DIMENSION_RANGE


scale_factor_subcells = VIEWER_DIMENSION_RANGE.MAX / 530.8317


@pytest.mark.parametrize(
    "trajectory, _filter, expected_bundleData_t0",
    [
        # sphere groups for owner cells and subcells
        (
            PhysicellData(
                meta_data=MetaData(
                    box_size=np.array([960, 640, 300.0]),
                    scale_factor=0.01,
                ),
                timestep=36,
                path_to_output_dir="simulariumio/tests/data/physicell/subcell_output/",
                display_data={
                    0: DisplayData(
                        name="Substrate",
                        display_type=DISPLAY_TYPE.SPHERE,
                        color="#d0c5c8",
                    ),
                },
                phase_names={0: {18: "fixed"}},
                max_owner_cells=10000,
                owner_cell_display_name="Stem cell",
                time_units=UnitData("min"),
            ),
            TranslateFilter(
                default_translation=0.01 * (-0.5 * np.array([960.0, 640.0, 300.0])),
            ),
            [
                1000,
                35,
                0,
                53.199999999999996,
                33.37142857142856,
                0.6230834556414013,
                0,
                0,
                0,
                2.4840728644388417,
                0,
                1000,
                36,
                0,
                57.199999999999996,
                33.37142857142856,
                0.6230834556414013,
                0,
                0,
                0,
                2.4840728644388417,
                0,
                1000,
                37,
                0,
                61.19999999999999,
                33.37142857142856,
                0.6230834556414013,
                0,
                0,
                0,
                2.4840728644388417,
                0,
                1000,
                38,
                0,
                65.2,
                33.37142857142856,
                0.6230834556414013,
                0,
                0,
                0,
                2.4840728644388417,
                0,
                1000,
                39,
                0,
                51.19999999999999,
                36.94285714285713,
                0.6230834556414013,
                0,
                0,
                0,
                2.4840728644388417,
                0,
                1000,
                40,
                0,
                55.19999999999999,
                36.94285714285713,
                0.6230834556414013,
                0,
                0,
                0,
                2.4840728644388417,
                0,
                1000,
                41,
                0,
                59.19999999999999,
                36.94285714285713,
                0.6230834556414013,
                0,
                0,
                0,
                2.4840728644388417,
                0,
                1000,
                42,
                0,
                63.19999999999999,
                36.94285714285713,
                0.6230834556414013,
                0,
                0,
                0,
                2.4840728644388417,
                0,
                1000,
                43,
                0,
                53.199999999999996,
                40.37142857142855,
                0.6230834556414013,
                0,
                0,
                0,
                2.4840728644388417,
                0,
                1000,
                44,
                0,
                57.199999999999996,
                40.37142857142855,
                0.6230834556414013,
                0,
                0,
                0,
                2.4840728644388417,
                0,
                1000,
                45,
                0,
                61.19999999999999,
                40.37142857142855,
                0.6230834556414013,
                0,
                0,
                0,
                2.4840728644388417,
                0,
                1000,
                46,
                0,
                65.2,
                40.37142857142855,
                0.6230834556414013,
                0,
                0,
                0,
                2.4840728644388417,
                0,
                1000,
                47,
                0,
                51.19999999999999,
                43.79999999999999,
                0.6230834556414013,
                0,
                0,
                0,
                2.4840728644388417,
                0,
                1000,
                48,
                0,
                55.19999999999999,
                43.79999999999999,
                0.6230834556414013,
                0,
                0,
                0,
                2.4840728644388417,
                0,
                1000,
                49,
                0,
                59.19999999999999,
                43.79999999999999,
                0.6230834556414013,
                0,
                0,
                0,
                2.4840728644388417,
                0,
                1000,
                50,
                0,
                63.19999999999999,
                43.79999999999999,
                0.6230834556414013,
                0,
                0,
                0,
                2.4840728644388417,
                0,
                1000,
                10008,
                1,
                57.92727272727271,
                33.07272727272726,
                5.3164045899362,
                0,
                0,
                0,
                1.0 * scale_factor_subcells,
                44,
                -6.7272727272727195,
                -1.7012987012987,
                -1.251552302478614,
                2.4656754281324416,
                -2.7272727272727146,
                -1.7012987012987,
                -1.251552302478614,
                2.4656754281324416,
                1.2727272727272831,
                -1.7012987012987,
                -1.251552302478614,
                2.4656754281324416,
                5.272727272727281,
                -1.7012987012987,
                -1.251552302478614,
                2.4656754281324416,
                -4.72727272727271,
                1.8701298701298659,
                -1.251552302478614,
                2.4656754281324416,
                -0.7272727272727119,
                1.8701298701298659,
                -1.251552302478614,
                2.4656754281324416,
                3.272727272727286,
                1.8701298701298659,
                -1.251552302478614,
                2.4656754281324416,
                -4.72727272727271,
                0.298701298701295,
                2.1902165293375715,
                2.4656754281324416,
                -0.7272727272727119,
                0.298701298701295,
                2.1902165293375715,
                2.4656754281324416,
                3.272727272727286,
                0.298701298701295,
                2.1902165293375715,
                2.4656754281324416,
                7.272727272727291,
                0.298701298701295,
                2.1902165293375715,
                2.4656754281324416,
                1000,
                10014,
                2,
                58.15652173913044,
                41.26583850931676,
                5.710915641804456,
                0,
                0,
                0,
                1.0 * scale_factor_subcells,
                92,
                -6.956521739130458,
                -2.894409937888195,
                -1.6460633543468695,
                2.4656754281324416,
                -2.9565217391304524,
                -2.894409937888195,
                -1.6460633543468695,
                2.4656754281324416,
                1.0434782608695454,
                -2.894409937888195,
                -1.6460633543468695,
                2.4656754281324416,
                5.043478260869543,
                -2.894409937888195,
                -1.6460633543468695,
                2.4656754281324416,
                -4.956521739130447,
                0.5341614906832369,
                -1.6460633543468695,
                2.4656754281324416,
                -0.9565217391304497,
                0.5341614906832369,
                -1.6460633543468695,
                2.4656754281324416,
                3.043478260869548,
                0.5341614906832369,
                -1.6460633543468695,
                2.4656754281324416,
                7.043478260869553,
                0.5341614906832369,
                -1.6460633543468695,
                2.4656754281324416,
                -6.956521739130458,
                3.962732919254661,
                -1.6460633543468695,
                2.4656754281324416,
                -2.9565217391304524,
                3.962732919254661,
                -1.6460633543468695,
                2.4656754281324416,
                1.0434782608695454,
                3.962732919254661,
                -1.6460633543468695,
                2.4656754281324416,
                5.043478260869543,
                3.962732919254661,
                -1.6460633543468695,
                2.4656754281324416,
                -2.9565217391304524,
                -4.322981366459625,
                1.795705477469316,
                2.4656754281324416,
                1.0434782608695454,
                -4.322981366459625,
                1.795705477469316,
                2.4656754281324416,
                5.043478260869543,
                -4.322981366459625,
                1.795705477469316,
                2.4656754281324416,
                -4.956521739130447,
                -0.8944099378882,
                1.795705477469316,
                2.4656754281324416,
                -0.9565217391304497,
                -0.8944099378882,
                1.795705477469316,
                2.4656754281324416,
                3.043478260869548,
                -0.8944099378882,
                1.795705477469316,
                2.4656754281324416,
                7.043478260869553,
                -0.8944099378882,
                1.795705477469316,
                2.4656754281324416,
                -6.956521739130458,
                2.534161490683232,
                1.795705477469316,
                2.4656754281324416,
                -2.9565217391304524,
                2.534161490683232,
                1.795705477469316,
                2.4656754281324416,
                1.0434782608695454,
                2.534161490683232,
                1.795705477469316,
                2.4656754281324416,
                5.043478260869543,
                2.534161490683232,
                1.795705477469316,
                2.4656754281324416,
                1000,
                10025,
                3,
                51.19999999999999,
                36.94285714285713,
                7.50662111927377,
                0,
                0,
                0,
                1.0 * scale_factor_subcells,
                4,
                0,
                0,
                0,
                2.4656754281324416,
                1000,
                10002,
                4,
                -4.8,
                -3.2,
                -1.5,
                0,
                0,
                0,
                1.0 * scale_factor_subcells,
                4,
                0,
                0,
                0,
                0,
            ],
        ),
    ],
)
def test_translate_filter(trajectory, _filter, expected_bundleData_t0):
    converter = PhysicellConverter(trajectory)
    filtered_data = converter.filter_data([_filter])
    buffer_data = JsonWriter.format_trajectory_data(filtered_data)
    assert False not in np.isclose(
        np.array(buffer_data["spatialData"]["bundleData"][0]["data"]),
        np.array(expected_bundleData_t0),
    )
